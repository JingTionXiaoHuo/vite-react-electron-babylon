{
  "compilerOptions": {
    // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度
    // "incremental": true,

    // 增量编译文件的存储位置
    // "tsBuildInfoFile": "./buildFile",

    // 打印诊断信息
    // "diagnostics": true,

    // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中
    // 即开启时应设置"module": "AMD"
    // "outFile": "./app.js",

    // 允许编译器编译JS，JSX文件
    // "allowJS": true,

    // 允许在JS文件中报错，通常与allowJS一起使用
    // "checkJs": true,

    // 指定输出目录
    // "outDir": "./dist",

    // 指定输出文件目录(用于输出)，用于控制输出目录结构
    // "rootDir": "./",

    // 指定生成声明文件存放目录
    // "declarationDir": "./file",

    // 只生成声明文件，而不会生成js文件
    // "emitDeclarationOnly": true,

    // 生成目标文件的sourceMap文件
    // "sourceMap": true,

    // 生成目标文件的inline SourceMap
    // inline SourceMap会包含在生成的js文件中
    // "inlineSourceMap": true,

    // 为声明文件生成sourceMap
    // "declarationMap": true,

    // 声明文件目录，默认时node_modules/@types
    // "typeRoots": [],

    // 加载的声明文件包
    //如果指定了某个值， 她会在 typeRoots 下找这个包，找到了就只加载这个包
    // "types": ["vite/client"],

    // 删除注释
    // "removeComments": true,

    // 发送错误时不输出任何文件
    // "noEmitOnError": true,

    // 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用
    // "noEmitHelpers": true,

    // 通过tslib引入helper函数，文件必须是模块
    // "importHelpers": true,

    // 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现
    // "downlevelIteration": true,

    // 在代码中注入'use strict'
    // "alwaysStrict": true,

    // 不允许隐式的any类型
    // "noImplicitAny": true,

    // 不允许把null、undefined赋值给其他类型的变量
    // "strictNullChecks": true,

    // 不允许函数参数双向协变
    // "strictFunctionTypes": true,

    // 类的实例属性必须初始化
    // "strictPropertyInitialization": true,

    // 严格的bind/call/apply检查
    // "strictBindCallApply": true,

    // 不允许this有隐式的any类型
    // "noImplicitThis": true,

    // 检查未使用的函数参数(只提示不报错)
    // "noUnusedParameters": true,

    // 防止switch语句贯穿(即如果没有break语句后面不会执行)
    // "noFallthroughCasesInSwitch": true,

    // 每个分支都会有返回值
    // "noImplicitReturns": true,

    // 允许在模块中全局变量的方式访问umd模块
    // "allowUmdGlobalAccess": true,

    // 解析非相对模块的基地址，默认是当前目录
    "baseUrl": "./",

    // 路径映射，相对于baseUrl
    "paths": {
      // 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置
      "meshwriter": ["custom-font-packages/meshwriter/dist/meshwriter.js"],
      "jquery": ["node_modules/jquery/dist/jquery.min.js"]
    },

    // 将多个目录放在一个虚拟目录下，用于运行时
    // 即编译后引入文件的位置可能发生变化
    // 这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错
    // "rootDirs": ["src", "out"],

    // 打印输出文件
    // "listEmittedFiles": true,

    // 打印编译的文件(包括引用的声明文件)
    // "listFiles": true,

    //默认值 React.createElement
    // "jsxFactory": "",

    // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'
    "target": "ESNext",

    // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
    "module": "ESNext",

    // 指定要包含在编译中的库文件
    "lib": ["DOM", "DOM.Iterable", "ESNext"],

    // 允许编译 javascript 文件
    "allowJs": false,

    // 报告 javascript 文件中的错误
    // "checkJs": true,

    // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
    "jsx": "react-jsx",

    // 生成相应的 '.d.ts' 文件
    "declaration": true,

    // 有未使用变量时，抛出错误
    "noUnusedLocals": true,

    // 忽略所有的声明文件（ *.d.ts）的类型检查。
    "skipLibCheck": true,

    // 支持使用import d from 'cjs'的方式引入commonjs包
    "esModuleInterop": false,

    // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "allowSyntheticDefaultImports": true,

    // 启用所有严格类型检查选项。
    "strict": true,

    // 禁止对同一个文件的不一致的引用。
    "forceConsistentCasingInFileNames": true,

    // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
    "moduleResolution": "Node",

    // 解析Json模块
    "resolveJsonModule": true,

    // 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）
    "isolatedModules": false,

    // 不输出文件,即编译后不会生成任何js文件
    "noEmit": true,

    // 将class声明中的字段语义从[Set]变更到[Define]
    "useDefineForClassFields": true
  },
  "include": ["src/**/*", "public/js/lib"],
  "exclude": ["build/**/*", "dist/**/*", "public/**/*"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
